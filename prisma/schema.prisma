generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String        @db.VarChar(255)
  color       String        @db.VarChar(255)
  userId      Int
  User        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Transaction Transaction[]
}

model Notification {
  id             Int         @id @default(autoincrement())
  transactiontId Int
  Transaction    Transaction @relation(fields: [transactiontId], references: [id], onDelete: Cascade)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Balance {
  id              Int         @id @default(autoincrement())
  value           Decimal     @db.Decimal(47, 2)
  dateTransaction DateTime    @db.Timestamp(3)
  userId          Int
  transactionId   Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  User            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Transaction     Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
}

model Transaction {
  id              Int             @id @default(autoincrement())
  value           Decimal         @db.Decimal(47, 2)
  typeTransaction TransactionType
  dateTransaction DateTime        @db.Timestamp(3)
  done            Boolean
  userId          Int
  categoryId      Int
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Category        Category        @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  User            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  Notification    Notification[]
  Balance         Balance[]
}

model User {
  id          Int           @id @default(autoincrement())
  name        String?       @db.VarChar(255)
  image       String?
  email       String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Session     Session[]
  Transaction Transaction[]
  Category    Category[]
  Balance     Balance[]
}

enum TransactionType {
  INPUT
  OUTPUT
}
